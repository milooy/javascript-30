@color-1: #ff4242;
@color-2: #2196f3;
@color-3: #cddc39;
@color-4: #ffa52f;

.outer {
  display: flex; // 상위 DOM을 플렉스로 감싼다
  border: 3px solid #e8e8e8;
  margin-bottom: 8px;
  // height: 50px;
  div {
    font-size: 2rem;
    color: white;
    font-weight: 900;
    text-align: center;
    padding: 1rem;
    &:nth-child(1), &.box1 {
      background: @color-1;
    }
    &:nth-child(2), &.box2 {
      background: @color-2;
    }
    &:nth-child(3), &.box3 {
      background: @color-3;
    }
    &:nth-child(4), &.box4 {
      background: @color-4;
    }
  }
}

h2 {
  margin-top: 4rem;
}

container.part1 {
  .outer { // 플렉스로 감싼 돔에 flex-direction 설정
    // flex-direction: row; // 이게 기본. 행으로 쌓임
    flex-direction: row-reverse; // row가 반대로 쌓임
    // flex-direction: column; // 열로 쌓임
  }
}

container.part2 {
  div {
    flex: 1; // 각각 1씩 부피 차지
    &.box2 {
      flex: 2;
    }
    &.box2 {
      order: 5; // 기본은 0. 이러면 2만 맨 뒤로 간다
    }
  }
}

container.part3 {
  .outer1 {
    // justify-content: flex-start; // 이게 기본. 
    justify-content: flex-end; // main axis의 끝쪽으로 정렬
  }
  .outer2 {
    justify-content: center; // main axis의 중앙
  }
  .outer3 {
    // justify-content: space-between; // 중간에 스페이스 넣어서 정렬
    justify-content: space-around; // 중간에 스페이스 넣어서 정렬하는데 처음이랑 끝도 스페이스 넣음
  }
  .outer4 {
    flex-direction: column;
    justify-content: space-between;
    height: 30vh;
  }
}

container.part4 {
  .outer {
    height: 15vh;
    // align-items: stretch; // 이게 기본. height에 맞게 쭉쭉 늘린다
  }
  .outer1 {
    align-items: center; // 수직 가운데 정렬
  }
  .outer2 {
    align-items: flex-end; // 수직 하단 정렬
  }
  .outer3 {
    align-items: baseline; // 각각 크기 다른 div, 그들의 baseline에 맞게 수직 정렬
    div {
      &:nth-child(2) {
        font-size: 30px;
      }
      &:nth-child(3) {
        font-size: 50px
      }
    }
  }
}

container.part5 {
  .outer1 {
    align-content: space-between; // cross-axis에서 space-between 정렬
    flex-wrap: wrap;
    height: 30vh;
    div {
      width: 40%;
    }
  }
  .outer2 {
    align-content: flex-end;
    justify-content: center; // main-axis도 가운데 정렬해보자
    flex-wrap: wrap;
    height: 30vh;
    div {
      width: 40%;
    }
  }
}

container.part6 {
  .outer1 {
    align-items: flex-end;
    height: 20vh;
    .box2 {
      align-self: flex-start; // 본인을 align함
    }
    .box4 {
      align-self: stretch;
    }
  }
}

container.part7 {
  .outer1 {
    div {
      // flex: 1; // flex-grow: 1; flex-shrink:1; 을 줄인거임
      // flex-grow: 1; // 여분의 공간이 있을 때 어떡할거냐
      // flex-shrink: 1;
      // flex-basis: 
      &.box1 {
        flex-basis: 200px;
        flex-grow: 5; // box1이 box2보다 5배 길이를 가진 것이 아니고, 200px씩을 뺀 남은 여백에서 비율이 5:1로 간다
        flex-shrink: 3; // 400px아래로 내려갔을 때 뺀 값만큼 3배로 줄어듦
        flex: 5 3 200px; // 위를 한번에 쓴 것. grow, shrink, basis
      }
      &.box2 {
        flex-basis: 200px;
        flex-grow: 1; // 기본은 0이다 - 지정 안하면 여백 있어도 아무 것도 안한다
        flex-shrink: 1;
      }
    }
  }
}

container.part8 {
  .outer{
    flex-wrap: wrap; // 이거 없으면 그냥 한 줄에 다 나올텐데 넣으니 스르륵 내려옴(200px맞춰서)
    flex-direction: column;
    height: 50vh;
    div {
      flex-basis: 120px;
      flex-grow: 1;
      &.box3 {
        flex-grow: 10; // flex-wrap으로 아래로 떨어져도, 여백의 10배 차지하는건 그 row만 기준이다. 전체 row기준 아님.
      }
    }
  }
}